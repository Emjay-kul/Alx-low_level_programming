!<arch>
0-isupper.c/    0           0     0     644     226       `
#include "main.h"
#include <stdio.h>
/**
 * _isupper - function that checks uppercase
 *
 * @c: integer value
 *
 * Return: 0
 */

int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
	{
		return (1);
	}
	else
		return (0);
}
0-memset.c/     0           0     0     644     377       `
#include "main.h"
/**
 * _memset - fills upn bytes in memory with constant byte b
 *
 * @s: memory pointer
 *
 * @b: constant byte used to fill memory space of s
 *
 * @n: No of bytes of memory to be filled
 *
 * Return: A pointer to memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     382       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 *
 * @dest: destination string
 *
 * @src: source string
 *
 * Return: final string after concatenation
 */
char *_strcat(char *dest, char *src)
{
	unsigned int i = 0;
	unsigned int j = 0;

	while (*(dest + i) != '\0')
		i++;

	while (*(src + j) != '\0')
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     410       `
#include "main.h"
#include <stdio.h>
/**
 * _atoi - converts string to integer
 *
 * @s: the string to be converted
 *
 * Return: integer value of converted string
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;

	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     225       `
#include "main.h"
#include <stdio.h>
/**
 * _isdigit - function that checks integers
 *
 * @c: integer value
 *
 * Return: 0
 */

int _isdigit(int c)
{
	if ((c >= '0') && (c <= '9'))
	{
		return (1);
	}
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     412       `
#include "main.h"
/**
 * _memcpy - copies n bytes from memory src to memory dest
 *
 * @src: memory pointer source
 *
 * @dest: memory destination where we'll paste the n bytes
 *
 * @n: No of bytes of memory to be filled
 *
 * Return: A pointer to memory area dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     452       `
#include "main.h"
/**
 * _strncat - concatenates two strings with n
 *
 * @dest: destination string
 *
 * @src: source string
 *
 * @n: number of characters from src
 *
 * Return: final string after concatenation
 */
char *_strncat(char *dest, char *src, int n)
{
	unsigned int i = 0;
	int j = 0;

	while (*(dest + i) != '\0')
		i++;

	while (*(src + j) != '\0')
	{
		if (j < n)
		{
			*(dest + i) = *(src + j);
			i++;
		}
		j++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     409       `
#include "main.h"
/**
 * _strchr - returns a pointer once c is encountered in the string s
 *
 * @s: string pointer
 *
 * @c: character whose occurrence in the string is being verified
 *
 * Return: A pointer to string s
 */
char *_strchr(char *s, char c)
{
	int a = 0;
	int b;

	while (s[a])
	{
		a++;
	}

	for (b = 0; b <= a; b++)
	{
		if (c == s[b])
		{
			s += b;
			return (s);
		}
	}

	return ('\0');
}

2-strlen.c/     0           0     0     644     235       `
#include <stdio.h>
#include "main.h"
/**
 * _strlen - Print length of string
 *
 * @s: string value
 *
 * Return: length of string s
 */
int _strlen(char *s)
{
	int length;

	length = 0;

	while (*s++)
		length++;

	return (length);
}

2-strncpy.c/    0           0     0     644     369       `
#include "main.h"
/**
 * _strncpy - concatenates two strings
 *
 * @dest: destination string
 *
 * @src: source string
 *
 * @n: integer
 *
 * Return: final string after concatenation
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     297       `
#include "main.h"
#include <stdio.h>
#include <ctype.h>

/**
 * _islower - function that checks if a
 * character is lowercase
 *
 * @c: parameter for function is_lower
 *
 * Return: 1 if true, 0 if false
 */

int _islower(int c)
{
	if (islower(c))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     202       `
#include <stdio.h>
#include "main.h"
/**
 * _puts - prints a string to stdout
 *
 * @s: character value
 *
 * Return: Always 0
 */
void _puts(char *s)
{
	while (*s)
		putchar(*s++);

	putchar('\n');

}
3-strcmp.c/     0           0     0     644     291       `
#include "main.h"
/**
 * _strcmp - compares two strings
 *
 * @s1: first string
 *
 * @s2: second string
 *
 * Return: Int
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	
	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}
	return (0);
}

3-strspn.c/     0           0     0     644     421       `
#include "main.h"
/**
 * _strspn - returns a pointer
 *
 * @s: string pointer
 *
 * @accept: second string
 *
 * Return: An unsigned int
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, stop;

	for (i = 0; *(s + i + 1); i++)
	{
		stop = 1;
		for (j = 0; *(accept + j + 1); j++)
		{
			if (*(s + i) == *(accept + j))
			{
				stop = 0;
				break;
			}
		}
		if (stop == 1)
			break;
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     339       `
#include "main.h"
#include <stdio.h>

/**
 * _isalpha - function that checks for alphabets
 *
 * @c: parameters given
 *
 * Return: 1 if alphabet is present and 0 if alphabet is absent
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     453       `
#include "main.h"
/**
 * _strpbrk - returns a pointer
 *
 * @s: string pointer
 *
 * @accept: second string
 *
 * Return: Character
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j, stop;
	char *tmp;

	for (i = 0; *(s + i + 1); i++)
	{
		stop = 0;
		for (j = 0; *(accept + j + 1); j++)
		{
			if (*(s + i) == *(accept + j))
			{
				tmp = s + i;
				stop = 1;
				break;
			}
			tmp = 0;
		}
		if (stop == 1)
			break;
	}
	return (tmp);
}

5-strstr.c/     0           0     0     644     421       `
#include "main.h"
/**
 * _strstr - returns a pointer
 *
 * @haystack: string pointer
 *
 * @needle: second string
 *
 * Return: Character
 */
char *_strstr(char *haystack, char *needle)
{
	int a = 0;
	int b = 0;

	while (haystack[a])
	{
		while (needle[b])
		{
			if (haystack[a + b] != needle[b])
			{
				break;
			}
			b++;
		}

		if (needle[b] == '\0')
		{
			return (haystack + a);
		}

		a++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     216       `
#include "main.h"
#include <stdio.h>
/**
 * _abs - code to print absolute value
 *
 * @n:integer value
 *
 * Return: The absolute value
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
		return (-n);
}


9-strcpy.c/     0           0     0     644     393       `
#include <stdio.h>
#include "main.h"
/**
 * _strcpy - copies a string from src to dest
 *
 * @dest: pointer value
 *
 * @src: pointer value
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int index = 0;

	if (dest == NULL)
	{
		return (NULL);
	}

	while ((src[index]) != '\0')
	{
		dest[index] = src[index];
		index++;
	}
	dest[index] = '\0';


	return (dest);
}

_putchar.c/     0           0     0     644     164       `
#include <unistd.h>
/**
 * _putchar - writes c to stdout
 * 
 * @c: character to be printed
 *
 * Return: 1
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
